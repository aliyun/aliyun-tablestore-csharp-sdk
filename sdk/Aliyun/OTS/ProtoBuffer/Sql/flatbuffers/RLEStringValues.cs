// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace com.alicloud.openservices.tablestore.core.protocol.sql.flatbuffers
{

    using global::System;
    using Google.FlatBuffers;

    public struct RLEStringValues : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
        public static RLEStringValues GetRootAsRLEStringValues(ByteBuffer _bb) { return GetRootAsRLEStringValues(_bb, new RLEStringValues()); }
        public static RLEStringValues GetRootAsRLEStringValues(ByteBuffer _bb, RLEStringValues obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public RLEStringValues __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Array(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
        public int ArrayLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
        public int IndexMapping(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
        public int IndexMappingLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetIndexMappingBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
        public ArraySegment<byte>? GetIndexMappingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public int[] GetIndexMappingArray() { return __p.__vector_as_array<int>(6); }

        public static Offset<com.alicloud.openservices.tablestore.core.protocol.sql.flatbuffers.RLEStringValues> CreateRLEStringValues(FlatBufferBuilder builder,
            VectorOffset arrayOffset = default(VectorOffset),
            VectorOffset index_mappingOffset = default(VectorOffset))
        {
            builder.StartTable(2);
            RLEStringValues.AddIndexMapping(builder, index_mappingOffset);
            RLEStringValues.AddArray(builder, arrayOffset);
            return RLEStringValues.EndRLEStringValues(builder);
        }

        public static void StartRLEStringValues(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddArray(FlatBufferBuilder builder, VectorOffset arrayOffset) { builder.AddOffset(0, arrayOffset.Value, 0); }
        public static VectorOffset CreateArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static void StartArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddIndexMapping(FlatBufferBuilder builder, VectorOffset indexMappingOffset) { builder.AddOffset(1, indexMappingOffset.Value, 0); }
        public static VectorOffset CreateIndexMappingVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateIndexMappingVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static void StartIndexMappingVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<com.alicloud.openservices.tablestore.core.protocol.sql.flatbuffers.RLEStringValues> EndRLEStringValues(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<com.alicloud.openservices.tablestore.core.protocol.sql.flatbuffers.RLEStringValues>(o);
        }
    };
}
